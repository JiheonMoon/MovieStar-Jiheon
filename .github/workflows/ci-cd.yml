name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies and build frontend
      run: |
        cd frontend
        npm install
        npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build

  build-backend:
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Set Gradlew Permissions
      run: chmod +x backend/moviestar/gradlew

    - name: Build backend
      env:
        DB_URL: ${{ secrets.DB_URL }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
        NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
      run: |
        cd backend/moviestar
        ./gradlew clean build
        ls -al build/libs/  # 빌드 결과 확인

    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-build
        path: backend/moviestar/build/libs/moviestar-0.0.1-SNAPSHOT.jar
        
  deploy:
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download frontend artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/build

    - name: Download backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        path: backend/moviestar/build/libs/

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Check if JAR file exists
      run: |
        if [ -f backend/moviestar/build/libs/moviestar-0.0.1-SNAPSHOT.jar ]; then
          echo "JAR file exists."
        else
          echo "JAR file does not exist."
          exit 1
        fi

    - name: Deploy to Amazon Linux Server
      env:
        DB_URL: ${{ secrets.DB_URL }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
        NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      run: |
        echo "Step 1: Clean existing deployment on the server"
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'rm -rf ~/app/frontend/* ~/app/backend/moviestar-0.0.1-SNAPSHOT.jar'

        echo "Step 2: Upload frontend build files"
        scp -o StrictHostKeyChecking=no -r frontend/build/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/frontend/

        echo "Step 3: Upload backend JAR file"
        scp -o StrictHostKeyChecking=no backend/moviestar/build/libs/moviestar-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/backend/

        echo "Step 4: Set permissions for frontend files"
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo chown -R ec2-user:ec2-user ~/app/frontend && sudo chmod -R 755 ~/app/frontend'

        echo "Step 5: Stop the currently running backend application"
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          PID=$(ps aux | grep "moviestar-0.0.1-SNAPSHOT.jar" | grep -v grep | awk '"'"'{print $2}'"'"')
          if [ -n "$PID" ]; then
            echo "Stopping process with PID: $PID"
            kill -9 $PID
          else
            echo "No existing application to stop"
          fi
        '

        echo "Step 6: Start the new backend application"
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'nohup java -jar ~/app/backend/moviestar-0.0.1-SNAPSHOT.jar > ~/logs/spring-boot.log 2>&1 &'

        echo "Step 6.5: Set environment variables on the server"
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
        echo "export REACT_APP_TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}" >> ~/.bashrc &&
        echo "export REACT_APP_YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> ~/.bashrc &&
        echo "export REACT_APP_NAVER_LOGIN_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> ~/.bashrc &&
        echo "export REACT_APP_GOOGLE_LOGIN_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> ~/.bashrc &&
        source ~/.bashrc
        
        echo "Step 7: Restart the Nginx server to serve the updated frontend"
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo systemctl restart nginx'
